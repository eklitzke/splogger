Items are ordered roughly in terms of importance. Things on the essential list
all need to be addressed before this could be considered production-worthy.

Essential
---------
* With respect to error handling and logging, the following sorts of errors
  should definitely be recoverable and when they are encountered the error
  should be logged and the daemon should proceed gracefully:
   - Unknown message types should be redirected to a special log (so we don't
     ever lose data) and the event should be logged

* Lots of cleanups needed to make it fail more gracefully (right now most
  failures will result in a call to exit(EXIT_FAILURE)). It should be possible
  to recover from a lot of the errors that are encountered. This is especially
  important for a daemon which is expected to stay up 24x7.

* There's almost no client support at the moment, other than splogger_msg which
  is a debugging tool to send log messages to the splogger system. Need to
  write a Python module for interacting with the splogger system.

* Better configuration
   - Should be able to configure host/port of spread daemon
   - Should be able to configure the synchronization level

* Health monitoring (if possible). It would be good to be able to kick out slow
  clients/servers from the cloud if a high synchronization level is on and
  those clients/servers are slowing down the group.

* Add logging to sploggerd. It should log basic things like parse errors and
  when it gets HUPed. Should probably log to syslog (!) by default, with, an
  option to use itself for logging.

* Test redundancy and fault tolerance.


Wishlist
--------
* Better signal handling (or maybe not -- right now SIGINT, SIGQUIT, SIGTERM,
  and SIGHUP are covered).

* Unit tests

* Benchmarks

* Profile memory usage under a stress test and try to eliminate memory leaks

* Long (GNU-style) options
